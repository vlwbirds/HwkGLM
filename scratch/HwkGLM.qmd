---
title: "HwkGLM"
format: html
editor: visual
---

## Model Hawk GLM

This is an attempt to build code for a generalize linear model. The data used are predator-prey reaction behaviors collected by launching a model hawk at birds in the Amazon in Madre de Dios, Peru. Reactions include: no response, call, alarm, sing, dive, hide, freeze, visual search

### Installing Packages

```{r}
#install.packages("glmm")
#install.packages("here")
#install.packages("lme4")
#install.packages("Matrix")
#install.packages("MuMIn")
#install.packages("performance")
#install.packages("tidyverse")

library(glmm)
library(here)
library(lme4)
library(Matrix)
library(MuMIn)
library(performance)
library(tidyverse)

```

## Loading Hawk Data

```{r}
hwk_GLM <- read_csv(here("data/hwkGLM.csv"))
view(hwk_GLM)

hwk_data <- read_csv(here("data/hwkdata.csv")) %>% 
  mutate(Flock_size = as.numeric(Flock_size)) %>% 
  mutate(Post_Dist = as.numeric(Post_Dist)) %>% 
  mutate(Veg_dense_under_avg = as.numeric(Veg_dense_under_avg)) %>% 
  mutate(Veg_under_height = as.numeric(Veg_under_height)) %>% 
  mutate(Veg_mid_low = as.numeric(Veg_mid_low)) %>% 
  mutate(Veg_mid_high = as.numeric(Veg_mid_high)) %>% 
  mutate(Veg_can_low = as.numeric(Veg_can_low)) %>% 
  mutate(Veg_can_high = as.numeric(Veg_can_high)) %>% 
  mutate(Rad_Avg_Dense = as.numeric(Rad_Avg_Dense)) %>% 
  mutate(across(c(Social_Index, hwk, Species, Mid_Vocal, Mid_Behav_2, Mid_Join, Sex), factor))
         #across(c(Veg_mid_low, Veg_mid_high, Veg_can_low, Veg_can_high, Rad_Avg_Dense), numeric))
  
hwk_data$Social_Index [hwk_data$Social_Index == "#N/A"] <- NA
hwk_data$Veg_dense_under_avg [hwk_data$Veg_dense_under_avg == "na" ] <- NA
str(hwk_data)


#view(hwk_data)
```

## Generalized Linear Model 1 (larger index)

```{r}
model1 <- glm(Mid_Join_Index1 ~ Mid_Join, data = hwk_GLM, family = poisson(link = "log"))
summary(model1)
```

## Generalized Linear Model 2 (conservative)

```{r}
#remove competitive
hwk_glm_1 <- hwk_GLM[hwk_GLM$Social_Index != "2", ]

model2 <- glm(Mid_Join_Index2 ~ Social_Index + SpeciesID + Pre_Height + Pre_Dense, data = hwk_glm_1, family = poisson(link = "log"))
summary(model2)

model3 <- glm(alarm ~ Social_Index, data = hwk_glm_1, family = binomial(link = "logit"))
summary(model3)
view(hwk_glm_1)
# update to multinomial distrubution
```

response \~ species + veg density + foraging + sociality

Sociality: MSF, singles, pairs, leks, SSF (single species group)

## Create Alarm in Dataframes

```{r}
hwk_GLM$alarm <- ifelse(hwk_GLM$Mid_Join_Index2 == 4,1,0)
View(hwk_GLM)

hwk_data$alarm <- ifelse(hwk_data$Mid_Vocal_Index == 2,1,0)
view(hwk_data)
```

## Social Index GLM Model

```{r}

model <- glm(alarm ~ Social_Index + SpeciesID + Pre_Height + Pre_Dense, data = hwk_GLM, family = binomial(link = "logit"))
summary(model)
```

```{r}
model <- glm(alarm ~ Social_Index + 
               SpeciesID + 
               Pre_Height + 
               Pre_Dense, 
             data = hwk_GLM, family = binomial(link = "logit"))
summary(model)
```

## Modeling with full hwk_data

```{r}
# selecting only hwk treatment
hwk_subset <- subset(hwk_data, hwk == 1)
hwk_subset$alarm <- as.factor(ifelse(hwk_subset$Mid_Vocal_Index==2,1,0))

# GLM model
model <- glm(alarm ~ SppID +
               sexID + 
               Flock_size + 
              # Flight_proximity + 
               #Pre_Height + 
               #Veg_under_height + 
              # Veg_mid_low + 
               #Veg_mid_high + 
              # Rad_Avg_Dense + 
               Pre_Dense, 
             data = hwk_subset, family = binomial(link = "logit"))
summary(model)
```

## Treatment Significance - Control v Hawk

```{r}
trt <- glm(alarm ~ hwk, data = hwk_data, family = binomial(link = "logit"))
summary(trt)             
```

## Bar Plot of Treatment Versus Control Alarm Percentage

```{r}
# Calculate percentage of positive reactions for treatment and control
percentage_treatment <- mean(hwk_data$alarm[hwk_data$hwk == 1]) * 100
percentage_control <- mean(hwk_data$alarm[hwk_data$hwk == 0]) * 100

# Calculate sample size for treatment and control
sample_size_treatment <- sum(hwk_data$hwk == 1)
sample_size_control <- sum(hwk_data$hwk == 0)

# Create a new data frame for plotting
plot_data <- data.frame(
  Group = c("Treatment", "Control"),
  Percentage = c(percentage_treatment, percentage_control),
  SampleSize = c(sample_size_treatment, sample_size_control)
)

# Create a bar plot
ggplot(plot_data, aes(x = Group, y = Percentage, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = paste("n =", SampleSize)), position = position_dodge(width = 0.9), vjust = -0.5) +
  labs(title = "Percentage of Positive Reactions by Group",
       y = "Alarm Percentage",
       x = "Group") +
  scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 50)) +
  theme_minimal()


```

## Social Structure Alarm Plot

```{r}
#subsetting for only treatment
hwk_subset <- subset(hwk_data, hwk == 1)
hwk_subset$alarm <- as.numeric(ifelse(hwk_subset$Mid_Vocal_Index==2,1,0))

# percentages of alarm by social structure
percent_solo <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 0], na.rm = TRUE) * 100
percent_pair <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 1], na.rm = TRUE) * 100
percent_comp <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 2], na.rm = TRUE) * 100
percent_ssf <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 3], na.rm = TRUE) * 100
percent_msf <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 4], na.rm = TRUE) * 100

# Sample sizes
sample_solo <- sum(hwk_subset$Social_Index == 0, na.rm = TRUE)
sample_pair <- sum(hwk_subset$Social_Index == 1, na.rm = TRUE)
sample_comp <- sum(hwk_subset$Social_Index == 2, na.rm = TRUE)
sample_ssf <- sum(hwk_subset$Social_Index == 3, na.rm = TRUE)
sample_msf <- sum(hwk_subset$Social_Index == 4, na.rm = TRUE)

# New dataframe for plotting
plot_data <- data.frame(
 Group = factor(c("Solo", "Pair", "Single-species Flock", "Mixed-species Flock", "Competitive"),
                levels = c("Solo", "Pair", "Single-species Flock", "Mixed-species Flock", "Competitive")),  
 Percentage = c(percent_solo, percent_pair, percent_ssf, percent_msf, percent_comp),
  SampleSize = c(sample_solo, sample_pair, sample_ssf, sample_msf, sample_comp)
)

# Create a bar plot
ggplot(plot_data, aes(x = Group, y = Percentage, fill = Group)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = paste("n =", SampleSize)), position = position_dodge(width = 0.9), vjust = -0.5) +
  labs(title = "Percentage of Positive Reactions by Sociality",
       y = "Alarm Percentage",
       x = "Group") +
  scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 50)) +
  theme_minimal()
```

## Social Structure By Species Alarming

```{r}
alarm_subset <- subset(hwk_subset, alarm == 1)
social_group <- alarm_subset %>% 
  group_by(Social_Index, Species) %>%
  summarize(total_alarm = sum(alarm)) %>% 
  group_by(Social_Index) %>% 
  mutate(proportion_alarm = total_alarm / sum(total_alarm))

view(social_group)

# multiply by proportions
percent_solo <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 0], na.rm = TRUE) * 100
percent_pair <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 1], na.rm = TRUE) * 100
percent_comp <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 2], na.rm = TRUE) * 100
percent_ssf <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 3], na.rm = TRUE) * 100
percent_msf <- mean(hwk_subset$alarm[hwk_subset$Social_Index == 4], na.rm = TRUE) * 100

```

## GLM - Social Index (factor)

```{r}
# subset to only hawk trials
hwk_subset <- subset(hwk_data, hwk == 1)

# model
model <- glm(Alarm ~ Social_Index, data = hwk_subset, family = binomial(link = "logit"))
summary(model)


```

## GLM - Social Index (numeric)

```{r}
# subset to only hawk trials
hwk_subset <- subset(hwk_data, hwk == 1)

# change Social_Index to numeric
social_numeric <- hwk_subset %>% 
  mutate(Social_Index = as.numeric(Social_Index))

# model
model <- glm(Alarm ~ Social_Index, data = social_numeric, family = binomial(link = "logit"))
summary(model)
```

## GLM - Social Index (factor), Competitive Removed

```{r}
# subset to only hawk trials
hwk_subset <- subset(hwk_data, hwk == 1)

# remove na from Social_Index
hwk_subset_narm <- hwk_subset[!is.na(hwk_subset$Social_Index), ]

# remove competitive
hwk_no_comp <- subset(hwk_subset_narm, Social_Index != 2)

# model
model <- glm(Alarm ~ Social_Index, data = hwk_no_comp, family = binomial(link = "logit"))
summary(model)
```

## GLM - Social Index (numeric), Competitive Removed

```{r}
# subset to only hawk trials
hwk_subset <- subset(hwk_data, hwk == 1)

# remove na from Social_Index
hwk_subset_narm <- hwk_subset[!is.na(hwk_subset$Social_Index), ]

# remove competitive
hwk_no_comp <- subset(hwk_subset_narm, Social_Index != 2)

# change Social_Index to numeric
social_numeric <- hwk_no_comp %>% 
  mutate(Social_Index = as.numeric(Social_Index))

# model
model <- glm(Alarm ~ Social_Index, data = social_numeric, family = binomial(link = "logit"))
summary(model)
```

## GLM - SI, Sex

```{r}
# subset to only hawk trials
hwk_subset <- subset(hwk_data, hwk == 1)
# str(hwk_subset)

# remove na from Social_Index
hwk_subset_narm <- hwk_subset[!is.na(hwk_subset$Social_Index), ]

# model
model <- glm(Alarm ~ Social_Index + sexID, data = hwk_subset_narm, family = binomial(link = "logit"))
summary(model)
```

```{r}
head(hwk_subset_narm)
```

## Remove Unwanted Variables

```{r}
# subset to only hawk trials
hwk_subset <- subset(hwk_data, hwk == 1)

# Columns to remove
unwanted_columns <- c("Timestamp_yymmdd_hhmmss","lat","long","obs1","shooter","Shoot_bird_dist","obs2","Obs2_bird_dist","Habitat_Primary","Habitat_Under_Dom1","Habitat_Under_Dom2","Basal Area 10m","Dbh_largest","Tar_Sp","Tar_Sp2","Species","BirdTree","Sex","Group_Type","Audio_React","hwk","msf","Forage_Tree_height","Rand_360_Degree","Rand_360_Dense_avg...35","Rand_360_Dense_avg...36","Pre_Behav","Pre_Substrate","Mid_Vocal","Mid_Vocal_Index","Mid_Behav","Mid_Behav_1","Dive","Hide_Freeze","Mid_Behav_Index","Mid_Behav_2","Mid_Join","Mid_Join_Index1","Mid_Join_Index2","Mid_Substrate","Post_Vocal","Post_Behav","Post_Substrate","Freeze_Time_sec","Post_Dist","Post_Bird_Dense_Avg","Post_Bird_Height","Veg_can_low","Veg_can_high","5m_dense","5mRad_01","5mRad_02","5mRad_03","5mRad_04","5mRad_05","5mRad_06","5mRad_07","5mRad_08","5mRad_09","5mRad_10")

# Remove unwanted columns using [ ] notation
df_subset <- hwk_subset[, !names(hwk_subset) %in% unwanted_columns]

# remove na
df_clean <- na.omit(df_subset)

df_numeric <- df_clean %>% 
  mutate(Social_Index = as.numeric(Social_Index))
```

## GLM - All Independent Vars (individual)

```{r}

# List of dependent variables
independent_vars <- c("Obs1_bird_dist","SppID","sexID","Flock_size","Social_Index","Flight_proximity","Pre_Height","Veg_dense_under_avg","Veg_under_height","Pre_Dense","Pre_Height","Veg_dense_under_avg","Veg_under_height","Pre_Dense","Veg_mid_low","Veg_mid_high","Rad_Avg_Dense")

# List to store model outputs
model_outputs <- list()

# Filter dataframe to include only rows where Pre_Height values are below 10
df_filtered <- df_numeric[df_numeric$Pre_Height < 10, ]

# Run GLM models
for (independent_var in independent_vars) {
  formula_string <- paste("Alarm ~ `", independent_var, "`", sep = "")
  model <- glm(as.formula(formula_string), data = df_filtered, family = binomial(link = "logit"))
  model_outputs[[independent_var]] <- broom::tidy(model)
}

# Combine model outputs into one large table
combined_table <- dplyr::bind_rows(model_outputs, .id = "Independent_Variable")

# Print the combined table
print(combined_table)

view(combined_table)
```

## GLM - All Independent Var (all combinations)

This takes A LOT of computing power

```{r}
# List of independent variables (ensure there are no leading or trailing spaces)
independent_vars <- c("Obs1_bird_dist", "SppID", "sexID", "Flock_size", "Social_Index", "Flight_proximity", 
                      "Pre_Height", "Veg_dense_under_avg", "Veg_under_height", "Pre_Dense", "Pre_Height", 
                      "Veg_dense_under_avg", "Veg_under_height", "Pre_Dense", "Veg_mid_low", "Veg_mid_high", 
                      "Rad_Avg_Dense")

# List to store model outputs
model_outputs <- list()

# Filter dataframe to include only rows where Pre_Height values are below 10
df_filtered <- df_numeric[df_numeric$Pre_Height < 10, ]

# Generate all combinations of independent variables
all_combinations <- lapply(seq_along(independent_vars), function(n) combn(independent_vars, n, simplify = FALSE))

# Flatten the list of combinations
all_combinations <- unlist(all_combinations, recursive = FALSE)

# Run GLM models for each combination
for (vars in all_combinations) {
  formula_string <- paste("Alarm ~", paste(vars, collapse = " + "))
  model <- glm(as.formula(formula_string), data = df_filtered, family = binomial(link = "logit"))
  model_outputs[[paste(vars, collapse = "_")]] <- broom::tidy(model)
}

# Combine model outputs into one large table
combined_table <- bind_rows(model_outputs, .id = "Combination")

# Print the combined table
print(combined_table)


view(combined_table)

# Define the file path using here()
file_path <- here("output", "all_vars_combined_table.csv")

# Write the combined table to the CSV file
write.csv(combined_table, file_path, row.names = FALSE)

```

## Social Index % by Group and Species

```{r}
# Convert "alarm" column to numeric
hwk_data$alarm <- as.numeric(hwk_data$alarm)

# Filter out non-numeric or missing values in the "alarm" column
hwk_data_filtered <- hwk_data %>%
  filter(!is.na(alarm)) %>%
  filter(!is.na(Social_Index)) %>%
  filter(is.numeric(alarm))

# Convert Social_Index to numeric
hwk_data_filtered$Social_Index <- as.numeric(as.character(hwk_data_filtered$Social_Index))

# Filter out rows where "Species" is exactly "#N/A_species"
hwk_data_filtered <- hwk_data_filtered %>%
  filter(Species != "#N/A_species")

# Calculate overall mean percentages by social structure
overall_means <- hwk_data_filtered %>%
  group_by(Social_Index) %>%
  summarize(Overall_Mean = mean(alarm, na.rm = TRUE) * 100)

# Calculate mean percentages by social structure and species
species_means <- hwk_data_filtered %>%
  group_by(Social_Index, Species) %>%
  summarize(Species_Mean = mean(alarm, na.rm = TRUE) * 100)

# Calculate mean percentages by unique species within each social index
unique_species_means <- hwk_data_filtered %>%
  group_by(Social_Index, Species) %>%
  summarize(Unique_Species_Mean = n() / length(unique(hwk_data_filtered$Trial_ID)) * 100)

# Order the levels of Social_Index
ordered_levels <- c(0, 1, 2, 3, 4)
overall_means$Social_Index <- factor(overall_means$Social_Index, levels = ordered_levels)
species_means$Social_Index <- factor(species_means$Social_Index, levels = ordered_levels)
unique_species_means$Social_Index <- factor(unique_species_means$Social_Index, levels = ordered_levels)

# Merge the data frames to ensure all levels are represented
combined_data <- merge(overall_means, species_means, by = c("Social_Index"))
combined_data <- merge(combined_data, unique_species_means, by = c("Social_Index", "Species"), all.x = TRUE)

# Create a stacked bar plot
ggplot(combined_data, aes(x = Social_Index, y = Unique_Species_Mean, fill = Species)) +
  geom_col(position = "fill", color = "white") +
  geom_text(aes(label = sprintf("%.1f%%", Unique_Species_Mean)), position = position_fill(vjust = 0.5)) +
  labs(title = "Stacked Bar Plot of Alarm Percentage by Social Index and Species",
       x = "Social Index",
       y = "Alarm Percentage") +
  scale_x_discrete(labels = c("0" = "Solo", "1" = "Pair", "2" = "Competitive", "3" = "SSF", "4" = "MSF")) +
  scale_y_continuous(labels = scales::percent_format(scale = 1), limits = c(0, 1)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

```

## Subset Lek Data

```{r}
hwk_lek <- subset(hwk_data, hwk_data$Social_Index == 2)
view(hwk_lek)
```
