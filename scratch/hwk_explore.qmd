---
title: "hwk_explore"
format: html
editor: visual
---

## Libraries & Data

```{r}
library(here)
library(tidyverse)

# all hwk data
hwk_data <- read_csv(here("data/hwkdata.csv"))

# data with all flock members in many to one arrangement based on timestamp
hwk_net <- read_csv(here("data/hwk_net.csv"))
view(hwk_net)
```

## Flock Abundance

```{r}
# remove NA
df_filtered <- hwk_net %>% 
  filter(!is.na(flock))

# convert flock to factor
df_filtered$flock <- as_factor(df_filtered$flock)

# calculate abundance and richness
result <- df_filtered %>%
  group_by(timestamp, tar, alarm) %>%
  summarise(richness = n_distinct(flock),
            abundance = n()) %>%
  ungroup()

# join abundance and richeness to trial type
merged_df <- inner_join(result, hwk_data %>% 
                          select(Timestamp_yymmdd_hhmmss, hwk), by = c("timestamp" = "Timestamp_yymmdd_hhmmss"))

view(merged_df)

# filter out control
df_hwk_filtered <- merged_df %>% 
  filter(hwk != 0)

# Calculate the alarm percentage for each unique richness value
richness_alarm <- df_hwk_filtered %>%
  group_by(richness) %>%
  summarise(alarm_percentage = (sum(alarm) / n()) * 100) %>%
  ungroup()

# Calculate the alarm percentage for each unique abundance value
abundance_alarm <- df_hwk_filtered %>%
  group_by(abundance) %>%
  summarise(alarm_percentage = (sum(alarm) / n()) * 100) %>%
  ungroup()

# Merge richness and abundance alarm percentage dataframes
combined_df <- merge(richness_alarm, abundance_alarm, by = "alarm_percentage", all = TRUE, suffixes = c("_richness", "_abundance"))

# Calculate sample size for richness and abundance
richness_sample_size <- combined_df %>%
  group_by(richness) %>%
  summarise(sample_size = n())

abundance_sample_size <- combined_df %>%
  group_by(abundance) %>%
  summarise(sample_size = n())

# Merge sample sizes with the combined dataframe
combined_df <- left_join(combined_df, richness_sample_size, by = "richness") %>%
  left_join(abundance_sample_size, by = "abundance") %>%
  mutate(sample_size_richness = ifelse(is.na(sample_size.x), 0, sample_size.x),
         sample_size_abundance = ifelse(is.na(sample_size.y), 0, sample_size.y))

# Calculate standard error for alarm percentage
combined_df <- combined_df %>%
  mutate(alarm_percentage_se = sd(alarm_percentage) / sqrt(n()))

# Plot both richness and abundance on the same plot with softer colors
plot_combined <- ggplot(combined_df, aes(x = richness, y = alarm_percentage)) +
  geom_point(aes(color = "Richness"), size = 3) +
  geom_smooth(aes(color = "Richness"), method = "lm", se = FALSE) +
  geom_point(aes(x = abundance, y = alarm_percentage, color = "Abundance"), size = 3) +
  geom_smooth(aes(x = abundance, y = alarm_percentage, color = "Abundance"), method = "lm", se = FALSE) +
  scale_color_manual(values = c("Richness" = "#8c96c6", "Abundance" = "#fc8d59"), name = "Category") + # softer shades of blue and red
  labs(x = "Adundance and Richness", y = "Alarm Percentage") +
  scale_x_continuous(breaks = 1:20) +  # Set x-axis breaks to be in single increments of 1 to 20
  scale_y_continuous(breaks = seq(0, 100, by = 10)) +  # Set y-axis breaks to be in increments of 10 from 0 to 100
  theme_minimal()

# Show the plot
print(plot_combined)

```
